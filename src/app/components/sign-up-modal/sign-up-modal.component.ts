import { Component, OnInit, TemplateRef } from '@angular/core';
import { BsModalService, BsModalRef} from 'ngx-bootstrap';
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { UserService } from 'src/app/services/user-service/user.service';
import { Batch } from 'src/app/models/batch';
import { User } from 'src/app/models/user';



/*** I've got this fragile piece of shit to the point where if you are careful, you 
  may create a consumable/transferable registration object upon submitting. There are 
  comments in the FormGroup code below that show how to finish off the validation. 
  Other than that, the batch select element in the template needs to be completed.
 ***/



@Component({
  selector: 'signupmodal',
  templateUrl: './sign-up-modal.component.html',
  styleUrls: ['./sign-up-modal.component.css']
})

export class SignupModalComponent implements OnInit {

  signUpForm: FormGroup;
  modalRef :BsModalRef;
  batch: Batch;
  user: User;

  isDriver: boolean = null;
  addressLine: string;
  city: string;
  state: string;
  options = {
    componentRestrictions : {
      country: ['US']
    }
  }



  constructor(private modalService :BsModalService, private userService: UserService) { }

  ngOnInit() {
    this.signUpForm = new FormGroup({
      /*** NEED TO CREATE VALIDATOR WHICH CHECKS DATABASE FOR EXISTING username AND email AND ADD IT TO THE 
        APPROPRIATE CONTROLS.
       ***/
      'firstname': new FormControl(null, Validators.required),
      'lastname': new FormControl(null, Validators.required),
      'email': new FormControl(null, [Validators.required, Validators.email]),
      'phonenumber': new FormControl(null, Validators.required),
      'batch': new FormControl(null),//need custom validator: valid if(this.isDriver != null).
      'address': new FormControl(null),//paste the city validator (from one line down) here.
      'city': new FormControl(null),//need custom validator: valid if(this.city != null && this.city != "").
      'state': new FormControl(null),//paste the city validator (from the line above) here.
      'zipcode': new FormControl(null, Validators.required),
      'username': new FormControl(null, Validators.required),
      'password': new FormControl(null, Validators.required)
    })
  }

  openModal(template :TemplateRef<any>) {
    this.modalRef = this.modalService.show(template);
  }

  setDriver(){
    if(!this.isDriver){
      this.isDriver=true;
      console.log("Registerer is a driver.");
    }
  }
  setRider(){
    if(this.isDriver){
      this.isDriver=false;
      console.log("Registerer is a rider.");
    }
  }

  public handleAddressChange(address: any) {
    let splitted = (address.srcElement.value).split(", ", 3);
    this.addressLine = splitted[0];
    this.city = splitted[1];
    this.state = splitted[2];
    if(this.city == null) {
      this.addressLine = null;
      this.city = null;
      this.state = null;
    }else {
      return;
    }
  }

  /** ONSUBMIT()
    This method is invoked when the FormGroup is submitted. We don't have to pass the form as a
    parameter because it is generated programmatically within this component.*/
  onSubmit() {
    this.printSubmitLogs();
    this.prepareModels();
    
    //WE MUST SEND THE this.registration OBJECT IN AN HTTP REQUEST TO THE BACKEND HERE.
    

    this.flushData();
  }

  /** PRINTSUBMITLOGS()
    This method is for testing purposes. As you can plainly see, it is used to log things to the 
    console and get insight on what is happening in the code.*/
  printSubmitLogs() {
    console.log("The this.signUpForm.status value is: " + this.signUpForm.status);
    console.log("This evaluates to: " + Boolean(this.signUpForm.status == "INVALID"));
    console.log(this.signUpForm);
  }

  
  /** PREPAREMODELS()
    This method creates the required objects for the http request that registers a new user. It 
    then populates them with the values generated by this component/template.*/
  prepareModels() {
    this.batch = new Batch(
      this.signUpForm.value.batch, 
      this.signUpForm.value.batch
    );
    this.user = new User();
      this.user.batch = this.batch;
      this.user.isDriver = this.isDriver;
      this.user.firstName = this.signUpForm.value.firstname;
      this.user.lastName = this.signUpForm.value.lastname;
      this.user.email = this.signUpForm.value.email;
      this.user.phoneNumber = this.signUpForm.value.phonenumber;
      this.user.hAddress = this.addressLine;
      this.user.hCity = this.city;
      this.user.hState = this.state;
      this.user.hZip = this.signUpForm.value.zipcode;
      //THESE WORK ADDRESS FIELDS ARE REQUIRED BY THE BACKEND FOR THE FORM TO SUBMIT SUCCESSFULLY.
      this.user.wAddress = this.addressLine;
      this.user.wCity = this.city;
      this.user.wState = this.state;
      this.user.wZip = this.signUpForm.value.zipcode;
      //YOU WILL GET A 500 RETURN STATUS BECAUSE THERE WON'T BE ANY RESPONSE.
      this.user.userName = this.signUpForm.value.username;
      //NOTE: WE CANNOT PASS THE PASSWORD BECAUSE IT DOESNT EXIST IN THE SPRING USER MODEL.
      //NOTE: YOU CANNOT CREATE A NEW MODEL OR CHANGE USER WITHOUT REFACTORING A LOT OF CODE.
      //      THE BACKEND IS EXPECTING A SPECIFIC OBJECT WITH SPECIFIC PARAMETERS.
      //      USER IS ALSO A DEPENDENCY OF OTHER COMPONENTS IN THE FRONTEND, SO DON'T ADD A PARAMETERIZED CONSTRUCTOR.
    //(TESTING)Log the Registration model.
    console.log(this.user);
  }

  /** SENDFORMHTTPPOST()
    This method uses the injected UserService to send an http post containing the User object. This method 
    has no parameters because the User object is available to the component and the service is injected.*/
  sendFormHttpPost() {
    this.userService.addUser(this.user).subscribe(res =>{
      console.log(res)
    }, error=>{
      console.log(error)
    })
  }

  /** FLUSHDATA()
    This method destroys all created objects and resets the form to a pristine condition. It should be invoked at 
    the ass-end of the ONSUBMIT method, after the http post for a new user succeeds.*/
  flushData() {
    this.isDriver = null;
    this.addressLine = null;
    this.city = null;
    this.state = null;
    this.signUpForm.reset();
    this.user = null;
    this.batch = null;
  }

}